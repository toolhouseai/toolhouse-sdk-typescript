// This file was generated by liblab | https://liblab.com/

import z from 'zod';
import { Environment } from './http/environment';
import { RequestBuilder } from './http/transport/request-builder';
import { ContentType, HttpResponse, RequestConfig, SdkConfig } from './http/types';
import { GetToolsRequest, GetToolsRequestGetToolsPostOkResponse, PublicTool, RunToolsRequest, RunToolsResponse, ToolsService } from './services/tools';
import { publicToolResponse } from './services/tools/models/public-tool';
import { HttpClient } from './http/client';
import { getToolsRequestRequest } from './services/tools/models/get-tools-request';
import { getToolsRequestGetToolsPostOkResponseResponse } from './services/tools/models/get-tools-request-get-tools-post-ok-response';
import { runToolsRequestRequest } from './services/tools/models/run-tools-request';
import { runToolsResponseResponse } from './services/tools/models/run-tools-response';

export * from './services/tools';

export type * from './http';

export default class Toolhouse {
  public client: HttpClient;

  constructor(public config: SdkConfig) {
    const baseUrl = config.environment || config.baseUrl || Environment.DEFAULT;
    this.config = {
      ...config,
      baseUrl,
    };
    this.client = new HttpClient(this.config);
  }

  /**
 * This endpoint retrieves a list of public tools available on Toolhouse.
 * @returns {Promise<HttpResponse<PublicTool[]>>} Successful Response
 */
  async tools(requestConfig?: RequestConfig): Promise<HttpResponse<PublicTool[]>> {
    const request = new RequestBuilder<PublicTool[]>()
      .setBaseUrl(this.config)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/tools')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(publicToolResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .build();
    return this.client.call<PublicTool[]>(request);
  }

  /**
* This endpoint retrieves tools from a specific provider.
* @returns {Promise<HttpResponse<GetToolsRequestGetToolsPostOkResponse>>} Successful Response
*/
  async getTools(
    body: GetToolsRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetToolsRequestGetToolsPostOkResponse>> {
    const request = new RequestBuilder<GetToolsRequestGetToolsPostOkResponse>()
      .setBaseUrl(this.config)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/get_tools')
      .setRequestSchema(getToolsRequestRequest)
      .setResponseSchema(getToolsRequestGetToolsPostOkResponseResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<GetToolsRequestGetToolsPostOkResponse>(request);
  }

  /**
   * This endpoint runs a tool based on the specified provider and content.
   * @returns {Promise<HttpResponse<RunToolsResponse>>} Successful Response
   */
  async runTools(
    body: RunToolsRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<RunToolsResponse>> {
    const request = new RequestBuilder<RunToolsResponse>()
      .setBaseUrl(this.config)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/run_tools')
      .setRequestSchema(runToolsRequestRequest)
      .setResponseSchema(runToolsResponseResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<RunToolsResponse>(request);
  }


  set baseUrl(baseUrl: string) {
    this.config.baseUrl = baseUrl;
  }

  set environment(environment: Environment) {
    this.config.environment = environment;
  }

  set timeoutMs(timeoutMs: number) {
    this.config.timeoutMs = timeoutMs;
  }

  set apiKey(apiKey: string) {
    this.config.apiKey = apiKey;
  }
}

// c029837e0e474b76bc487506e8799df5e3335891efe4fb02bda7a1441840310c
